library(ANTsR)
fname <- '/users/ncullen/desktop/deepseg/image.nii.gz'
img <- antsImageRead(fname,3)
# apply n4 bias correction
n4img<-n4BiasFieldCorrection(img)
# truncate intensity
trunc = iMath( n4img, "TruncateIntensity", 0.01, 0.99 )
n4truncnorm = iMath( trunc, "Normalize" )
antsImageWrite(n4truncnorm,'/users/ncullen/desktop/deepseg/image_processed.nii.gz')
library(ANTsR)
help("sparseDecom2")
mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
mydecom<-sparseDecom2( inmatrix=list(mat,mat2),
sparseness=c(0.1,0.3) , nvecs=3, its=3, perms=0)
wt<-0.666
mat3<-mat*wt+mat2*(1-wt)
mydecom<-sparseDecom2( inmatrix=list(mat,mat3),
sparseness=c(0.2,0.2), nvecs=5, its=10, perms=5 )
mydecom
mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
mydecom<-sparseDecom2( inmatrix=list(mat,mat2),
sparseness=c(0.1,0.3) , nvecs=3, its=3, perms=0)
wt<-0.666
mydecom
mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
mydecom<-sparseDecom2( inmatrix=list(mat,mat2),
sparseness=c(0.1,0.3) , nvecs=3, its=3, perms=0)
wt<-0.666
mydecom
mydecom$eig1
mean(mydecom$eig1)
mean(mydecom$eig1>0)
sum(mydecom$eig1>0)
mydecom$eig1>0
mean(mydecom$eig1!=0)
mean(mydecom$eig2!=0)
mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
mydecom<-sparseDecom2( inmatrix=list(mat,mat2),
sparseness=c(0.9,0.9) , nvecs=3, its=3, perms=0)
wt<-0.666
mydecom
mean(mydecom$eig2!=0)
mean(mydecom$eig1!=0)
mat<-replicate(100, rnorm(20))
mat2<-replicate(100, rnorm(20))
mat<-scale(mat)
mat2<-scale(mat2)
mydecom<-sparseDecom2( inmatrix=list(mat,mat2),
sparseness=c(0.04,0.23) , nvecs=3, its=3, perms=0)
wt<-0.666
mean(mydecom$eig2!=0)
mean(mydecom$eig1!=0)
### Change this to wherever you put the code ###
setwd(paste(Sys.getenv("HOME"), "Desktop/embarc_cca/code/old_code/avants_github", sep = "/"))
library("ANTsR")
library("pheatmap")
library("knitr")
library("magrittr")
library("dplyr")
library("broom")
library("stringr")
library("fpc")
library("TDA")
library("broom")
library("bestglm")
anat=read.csv("oasisLabels.csv")
demog = read.csv("embarcClinicalData.csv")
thick=read.csv("embarcAllGroupsCorticalThicknessAJF.csv")
regionalVols=read.csv("embarcAllGroupsLabelVolumesAJF.csv")
# (PAC) Brian does not include the 3rd and 4th ventricles in brain volume, so neither will I
brainVol=cbind(regionalVols[,1:3], brainVolumeMM3 = rowSums( regionalVols[,6:ncol(regionalVols)] ) )
anat
head(anat)
head(brainVol)
head(demog)
library("ANTsR")
library(readr)
clinical <- read_csv("~/Desktop/embarc_cca/data/clinical_final_6-21.csv")
head(clinical)
clinical['race']
clinical['race',0]
clinical['race',0:1]
clinical['race']
clinical[0,0]
clinical[c(0,1),c(0,1)]
clinical[c(0,1,2),c(0,1)]
clinical[0,'race']
clinical[c(0,1,2),'race']
clinical[c(0,1,2),'age']
colnames(clinical)
library("ANTsR")
library(readr)
clinical <- read_csv("~/Desktop/embarc_cca/data/clinical_final_6-21.csv")
thick.raw <- read.csv("~/Desktop/embarc_cca/data/thick_raw.csv")
X_data <- scale(data.matrix(thick.raw))
Y_data <- scale(data.matrix(clinical))
cca=sparseDecom2( list( X_data , Y_data ),
nvecs=nv, its=50, verbose=0,
sparseness=c( 0.2, 0.2 ), robust=0,
mycoption=0, perms=50 )
library(ANTsR)
ls
img <- antsImageRead('~/desktop/img2d.nii.gz',2)
invisible(plot(img))
img.h0 <- iMath(img, 'FillHoles', 0)
plot(img.h0)
img.h1 <- iMath(img, 'FillHoles', 1)
plot(img.h1)
plot(img)
plot(img.h1)
img.h2 <- iMath(img, 'FillHoles', 2)
plot(img.h2)
plot(img)
img[:10]
img[:10,:10]
img[1:10,1:10]
img
img[100:200,100:200] = 1
plot(img)
img[1:256,1:256] = 0
plot(img)
img[100:200,100:200] = 1
plot(img)
img
sum(img)
mean(img)
plot(img)
img[100:200,100:200] = 10
plot(img)
img[100:200,100:200] = 0.8
plot(img)
img[1:256,1:256] = 0
img[30:60,30:60] = 0.8
plot(Img)
plot(img)
img
img <- antsImageRead('~/desktop/outfile.jpg',2)
plot(img)
img.h0 <- iMath(img, "FillHoles",0)
plot(img.h0)
antsImageWrite(img.h0,'outfile_filled.jpg')
antsImageWrite(img.h0,'outfile_filled.jpeg')
img.h0
img <- antsImageRead('~/desktop/outfile.jpg',2)
plot(img)
img
img <- antsImageRead('~/desktop/outfile.jpg',2, 'int')
img <- antsImageRead('~/desktop/outfile.jpg','int')
img <- antsImageRead('~/desktop/outfile.jpg',2,'uint')
??antsImageRead
img <- antsImageRead('~/desktop/outfile.jpg',2, 'integer')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='integer')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='unsigned int')
plot(img)
img
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='int')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='integer')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='signed int')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='unsigned int')
img.h0 <- iMath(img, 'FillHoles', 0)
antsImageWrite('~/desktop/out.jpg', img.h0)
img.h0
antsImageWrite(img.h0,'~/desktop/out.jpg')
antsImageWrite(img.h0,'~/desktop/out.nii.gz')
img <- antsImageRead('~/desktop/outfile.jpg',2, pixeltype='unsigned int')
plot(img)
plot(float(img))
img.h0 <- iMath(img,'FillHoles',0)
antsImageWrite(img.h0,'~/desktop/out.nii.gz')
img.h0 <- iMath(img,'FillHoles',1)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
img.h0 <- iMath(img,'FillHoles',0)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
help("iMathOps")
data(iMathOps)
img.h0 <- iMath(img,'FillHoles',0.1)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
img.h0 <- iMath(img,'FillHoles',0.4)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
img.h0 <- iMath(img,'FillHoles',0.8)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
img.h0 <- iMath(img,'FillHoles',1)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
img.h0 <- iMath(img,'FillHoles',1.2)
antsImageWrite(img.h0,'~/desktop/out2.nii.gz')
plot(img)
img <- antsImageRead('~/desktop/image.nii.gz')
plot(img)
img <- antsImageRead('~/desktop/img2d.nii.gz')
plot(img)
img2 <- iMath(img, "GetLargestComponent")
plot(img2)
plot(img)
img <- antsImageRead(getANTsRData('r16'))
img2 <- iMath(img, "GetLargestComponent")
plot(img)
library(ANTsR)
img <- antsImageRead('~/desktop/img2d.nii.gz')
invisible(plot(img))
img.b <- iMath(img, 'BlobDetector' 3)
img.b <- iMath(img, 'BlobDetector', 3)
img.b <- iMath(img, "BlobDetector", 3)
??iMath
img.b <- iMath(img, "BD", 3)
??BlobDetector
??BlobDetecter
img.b <- iMath(img, "BlobDetector", 3)
img.b <- iMath(img, "BlobDetector", 3)
img.b <- iMath(img, "BlobDetector", 3,4,5)
img.b <- iMath(img, "BlobDetector")
img.b <- iMath(img, "BlobDetector",3)
iMathOps()
iMathOps
library(ANTsRCore)
library(ANTsR)
getANTsRData
??antsImageComparisonImageNumeric
antsImageHeaderInfo(img1)
img1 <- getANTsRData('r16')
antsImageHeaderInfo(img1)
img1 <- getANTsRData('r16')
img2 <- getANTsRData('r16')
img3 <- getANTsRData('r16')
img4 <- getANTsRData('r16')
img5 <- getANTsRData('r16')
imgs <- c(img1,img2,img3,img4,img5)
x<-mergeChannels(imgs)
ims
imgs
img1
img1 <- antsImageRead(getANTsRData('r16'))
img2 <- antsImageRead(getANTsRData('r16'))
img3 <- antsImageRead(getANTsRData('r16'))
img4 <- antsImageRead(getANTsRData('r16'))
img5 <- antsImageRead(getANTsRData('r16'))
imgs <- c(img1,img2,img3,img4,img5)
x<- mergeChannels(imgs)
x
img1
img1 <- antsImageRead(getANTsRData('r16'))
img1
max(img1)
n4BiasFieldCorrection
library(ANTsR)
library(ANTsR)
vignettes(ANTsR)
help(thresholdImage)
help(makeImage)
??thresholdImage
??labelStats
library(ANTsR)
??resampleImage
fi<-antsImageRead( getANTsRData("r16"))
fi
finn <- resampleImage(fi, c(50,60))
finn
finn <- resampleImage(fi, c(50,60),TRUE,0)
finn
fi
256 / 50
256/60
library(ANTsR)
img <- getANTsRData('r16')
img.km <- thresholdImage(img, 'kmeans')
help(thresholdImage)
img
img <- antsImageRead(getANTsRData('r1'))
img <- antsImageRead(getANTsRData('r16'))
img.km <- thresholdImage(img, 'kmeans', 2)
invisible(plot(img.km))
img.km <- thresholdImage(img, 'kmeans', 3)
invisible(plot(img.km))
img.km <- thresholdImage(img, 'kmeans')
img.km <- thresholdImage(img, 'kmeans',4)
invisible(plot(img.km))
invisible(plot(img))
img.km <- thresholdImage(img, 'kmeans',300)
invisible(plot(img.km))
img.km <- thresholdImage(img, 'kmeans',20)
invisible(plot(img.km))
img.km <- thresholdImage(img, 'kmeans',2)
invisible(plot(img.km))
img <- antsImageRead(getANTsRData('r16'))
img2 <- antsImageRead(getANTsRData('r32'))
img2 <- antsImageRead(getANTsRData('r16'))
img2 <- img2 + 2
img.mean <- antsAverageImages(c(img,img2))
mean(img)
mean(img)
mean(img2)
mean(img.mean)
??antsAverageImages
??ANTsR
n = 64
fn<-getANTsRData("r16")
img<-antsImageRead(fn)
img<-resampleImage(img,c(n,n),1,0)
tf<-getANTsRData("r27")
tem<-antsImageRead(tf)
tem<-resampleImage(tem,c(n,n),1,0)
plot(img)
ploto(tem)
plot(tem)
temmask<-antsImageClone( tem )
temmask[ tem  > 20 ] <- 1
temmask[ tem  <= 20 ] <- 0
bm<-abpBrainExtraction(img=img,tem=tem,temmask=temmask)
plot(bm)
bm
plot(bm$brain)
plot(bm$bmask)
plot(bm$kmeansseg)
plot(flot(bm$kmeansseg))
img
img
img2
img <- antsImageRead(getANTsRData('16'))
img <- antsImageRead(getANTsRData('r16'))
img2 <- antsImageRead(getANTsRData('r30'))
plot(img)
plot(img2)
img
img2
antsSetSpacing(img, c(2.,2.))
img
img2
img3 = img + img2
library(ANTsR)
help(antsApplyTransforms)
antsApplyTransforms('-h')
antsApplyTransforms("-h")
fixed <- antsImageRead( getANTsRData("r16") ,2)
moving <- antsImageRead( getANTsRData("r64") ,2)
fixed <- resampleImage(fixed,c(64,64),1,0)
moving <- resampleImage(moving,c(64,64),1,0)
mytx <- antsRegistration(fixed=fixed , moving=moving ,
typeofTransform = c("SyN") )
mytx
fixed
plot(mytx$warpedfixout)
plot(mytx$warpedmoveout)
plot(mytx$warpedmovout)
plot(fixed)
fixed <- antsImageRead( getANTsRData("r16") ,2)
moving <- antsImageRead( getANTsRData("r64") ,2)
mytx <- antsRegistration(fixed=fixed , moving=moving ,
typeofTransform = c("SyN") )
plot(fixed)
plot(mytx$warpedfixout)
plot(mytx$warpedmovout)
plot(moving)
plot(mytx$warpedmovout)
edge <- iMath(mytxt$warpedmovout, "Canny")
edge <- iMath(mytx$warpedmovout, "Canny",1,12,5)
plot(edge)
plot(mytx$warpedfixout,edge)
mytx$warpedfixout
mytx$warpedmovout
fixed
moving
plot(fixed, iMath(moving,'Canny', 1,12,5))
plot(moving, iMath(fixed,'Canny', 1,12,5))
moving
plotColor(moving)
help(applyAntsrTransformToImage)
help(new)
help(denoiseImage)
img <- antsImageRead( getANTsRData("rand")  ) %>% resampleImage( c(32, 32) )
plot(img)
dimg <- denoiseImage( img, img * 0 + 1 )
plot(dimg)
plot(img)
plot(dimg)
plot(antsImageRead(getANTsRData('r16')))
img
img <- antsImageRead(getANTsRData('r16'))
img
antsSetSpacing(img, c(2,2))
img
img
img2 <- antsImageRead(getANTsRData('r64'))
library(ANTsR)
??grid
help(resampleImage)
help(resampleImageToTarget)
help(antsRegistratino)
help(antsRegistration)
help("applyAntsrTransform")
setwd('~/desktop/projects/ants/antspy/tests/data')
img1 = antsImageRead('image_UNSIGNEDCHAR_2D.nii.gz')
library(ANTsR)
img1 = antsImageRead('image_UNSIGNEDCHAR_2D.nii.gz')
img2 = antsImageRead('image_FLOAT_2D.nii.gz')
img3 = img1+img2
img3
img2
img1
img1 = antsImageRead('image_UNSIGNEDCHAR_2D.nii.gz', "unsigned char")
img1 = antsImageRead('image_UNSIGNEDCHAR_2D.nii.gz', 2, "unsigned char")
img1
img2
img3 = img1+img2
img3
img1
img2
img2 = antsImageRead('image_FLOAT_2D.nii.gz',2,"int")
img2 = antsImageRead('image_FLOAT_2D.nii.gz',2,"unsigned int")
img1
img2
img1+img2
img1 = antsImageRead('image_UNSIGNEDCHAR_2D.nii.gz', 2, "float")
img1+img2
